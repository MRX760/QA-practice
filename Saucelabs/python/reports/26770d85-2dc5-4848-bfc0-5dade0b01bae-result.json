{"name": "[Positive] Verify user can login on saucelabs using correct credentials", "status": "broken", "statusDetails": {"message": "ValueError: No presence of element with identifier: ('xpath', '//*[@id=\"header_container\"]/div[2]/span') \n Please check connection or element identifier.", "trace": "self = <page.inventory_page.Inventory_page object at 0x000001AFAE2799D0>\nidentifier = ('xpath', '//*[@id=\"header_container\"]/div[2]/span'), time = 5\n\n    def get_wait(self, identifier:tuple, time:int=10) -> object:\n        \"\"\"Get element object with timeout wait, can be used for checking if element is exist within particular time after actions.\n        Args:\n            identifier (tuple): For example, (By.ID, \"user-name\") or else.\n            time (int, optional): Timeout wait. Defaults to 10.\n    \n        Raises:\n            ValueError: Wrong/non-exist identifier\n    \n        Returns:\n            object: Object with given identifier\n        \"\"\"\n        try:\n>           return WebDriverWait(self.driver, time).until(\n                EC.presence_of_element_located(identifier)\n            )\n\npage\\POM.py:114: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"0c624e183145e6c323dd51a8c5c97b2b\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x000001AFAE665B20>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6828BC6A5+28789]\nE       \t(No symbol) [0x00007FF682825B20]\nE       \t(No symbol) [0x00007FF6826B8F9A]\nE       \t(No symbol) [0x00007FF68270F346]\nE       \t(No symbol) [0x00007FF68270F57C]\nE       \t(No symbol) [0x00007FF682762B17]\nE       \t(No symbol) [0x00007FF68273736F]\nE       \t(No symbol) [0x00007FF68275F7E3]\nE       \t(No symbol) [0x00007FF682737103]\nE       \t(No symbol) [0x00007FF6826FFFC0]\nE       \t(No symbol) [0x00007FF682701273]\nE       \tGetHandleVerifier [0x00007FF682C01AED+3458237]\nE       \tGetHandleVerifier [0x00007FF682C1829C+3550316]\nE       \tGetHandleVerifier [0x00007FF682C0DB9D+3507565]\nE       \tGetHandleVerifier [0x00007FF682982C6A+841274]\nE       \t(No symbol) [0x00007FF6828309EF]\nE       \t(No symbol) [0x00007FF68282CB34]\nE       \t(No symbol) [0x00007FF68282CCD6]\nE       \t(No symbol) [0x00007FF68281C119]\nE       \tBaseThreadInitThunk [0x00007FFCF787E8D7+23]\nE       \tRtlUserThreadStart [0x00007FFCF8D7BF2C+44]\n\nC:\\Users\\tan\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\test-package-xh99BTJe-py3.12\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nset_up = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"0c624e183145e6c323dd51a8c5c97b2b\")>\n\n    @step(\"user try login with correct credentials\")\n    @story(\"User can login to website using correct credentials\")\n    @title(\"[Positive] Verify user can login on saucelabs using correct credentials\")\n    def test_login_correct_credentials(set_up):\n        #instance initialization\n        driver = set_up\n        login_page = Login_page(driver)\n        inventory_page = Inventory_page(driver)\n    \n        # Perform login with correct credentials\n        # login_page.login_as(\"standard_user\", \"secret_sauce\")\n        login_page.insert_credentials(\"standard_user\", \"secret_sauce\")\n    \n        login_page.make_pass_visible()\n        login_page.take_page_screenshot(\"Credentials\")\n    \n        login_page.click_btn(login_page.login_button)\n    \n>       assert inventory_page.get_wait(inventory_page.title, 5).is_displayed(), inventory_page.take_page_screenshot(\"failed to locate element\")\n\ntests\\test_login.py:138: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <page.inventory_page.Inventory_page object at 0x000001AFAE2799D0>\nidentifier = ('xpath', '//*[@id=\"header_container\"]/div[2]/span'), time = 5\n\n    def get_wait(self, identifier:tuple, time:int=10) -> object:\n        \"\"\"Get element object with timeout wait, can be used for checking if element is exist within particular time after actions.\n        Args:\n            identifier (tuple): For example, (By.ID, \"user-name\") or else.\n            time (int, optional): Timeout wait. Defaults to 10.\n    \n        Raises:\n            ValueError: Wrong/non-exist identifier\n    \n        Returns:\n            object: Object with given identifier\n        \"\"\"\n        try:\n            return WebDriverWait(self.driver, time).until(\n                EC.presence_of_element_located(identifier)\n            )\n        except Exception as e:\n>           raise ValueError(f\"No presence of element with identifier: {identifier} \\n Please check connection or element identifier.\")\nE           ValueError: No presence of element with identifier: ('xpath', '//*[@id=\"header_container\"]/div[2]/span') \nE            Please check connection or element identifier.\n\npage\\POM.py:118: ValueError"}, "steps": [{"name": "user try login with correct credentials", "status": "broken", "statusDetails": {"message": "ValueError: No presence of element with identifier: ('xpath', '//*[@id=\"header_container\"]/div[2]/span') \n Please check connection or element identifier.\n", "trace": "  File \"C:\\Users\\tan\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\test-package-xh99BTJe-py3.12\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\QA-practice\\Saucelabs\\python\\tests\\test_login.py\", line 138, in test_login_correct_credentials\n    assert inventory_page.get_wait(inventory_page.title, 5).is_displayed(), inventory_page.take_page_screenshot(\"failed to locate element\")\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\QA-practice\\Saucelabs\\python\\page\\POM.py\", line 118, in get_wait\n    raise ValueError(f\"No presence of element with identifier: {identifier} \\n Please check connection or element identifier.\")\n"}, "steps": [{"name": "Insert username as 'standard_user'", "status": "passed", "parameters": [{"name": "username", "value": "'standard_user'"}], "start": 1740990615744, "stop": 1740990616050}, {"name": "Insert password to be 'secret_sauce'", "status": "passed", "parameters": [{"name": "password", "value": "'secret_sauce'"}], "start": 1740990616050, "stop": 1740990616377}, {"name": "Execute script to make password field visible", "status": "passed", "start": 1740990616377, "stop": 1740990616393}, {"name": "Take Screenshot", "status": "passed", "attachments": [{"name": "Credentials", "source": "ad62bcfd-4d7a-4a9f-b32b-aa857340525a-attachment.png", "type": "image/png"}], "parameters": [{"name": "file_name", "value": "'Credentials'"}], "start": 1740990616393, "stop": 1740990616460}, {"name": "Clicking button", "status": "passed", "parameters": [{"name": "identifier", "value": "('id', 'login-button')"}], "start": 1740990616460, "stop": 1740990617017}], "parameters": [{"name": "set_up", "value": "<selenium.webdriver.chrome.webdriver.WebDriver (session=\"0c624e183145e6c323dd51a8c5c97b2b\")>"}], "start": 1740990615744, "stop": 1740990622206}], "start": 1740990615743, "stop": 1740990622214, "uuid": "44c6b7cc-aeb1-4ba0-a5b2-33ae0b88ae3e", "historyId": "cfce530969d8b07c8d2d8c1371bdbbcd", "testCaseId": "cfce530969d8b07c8d2d8c1371bdbbcd", "fullName": "tests.test_login#test_login_correct_credentials", "labels": [{"name": "feature", "value": "Login"}, {"name": "severity", "value": "blocker"}, {"name": "suite", "value": "Validate Login Functionality"}, {"name": "story", "value": "User can login to website using correct credentials"}, {"name": "parentSuite", "value": "tests"}, {"name": "host", "value": "LOQ15"}, {"name": "thread", "value": "14380-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login"}]}