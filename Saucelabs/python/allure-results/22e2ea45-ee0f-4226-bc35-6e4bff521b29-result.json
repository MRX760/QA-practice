{"name": "test_steps", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSelectorException: Message: invalid selector\nfrom javascript error: {\"status\":32,\"value\":\"The result of the xpath expression \\\"//*[@id=\\\"login_button_container\\\"]/div/form/div[3]/h3/text()\\\" is: [object Text]. It should be an element.\"}\n  (Session info: chrome=131.0.6778.205); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nStacktrace:\n\tGetHandleVerifier [0x00007FF68B31FB05+28789]\n\t(No symbol) [0x00007FF68B2886E0]\n\t(No symbol) [0x00007FF68B12592A]\n\t(No symbol) [0x00007FF68B12C48F]\n\t(No symbol) [0x00007FF68B12F13C]\n\t(No symbol) [0x00007FF68B12F20F]\n\t(No symbol) [0x00007FF68B178DBA]\n\t(No symbol) [0x00007FF68B1795FC]\n\t(No symbol) [0x00007FF68B1C28A7]\n\t(No symbol) [0x00007FF68B19F47F]\n\t(No symbol) [0x00007FF68B1BF654]\n\t(No symbol) [0x00007FF68B19F1E3]\n\t(No symbol) [0x00007FF68B16A938]\n\t(No symbol) [0x00007FF68B16BAA1]\n\tGetHandleVerifier [0x00007FF68B65933D+3410093]\n\tGetHandleVerifier [0x00007FF68B66E7DD+3497293]\n\tGetHandleVerifier [0x00007FF68B662A73+3448803]\n\tGetHandleVerifier [0x00007FF68B3E7BBB+848171]\n\t(No symbol) [0x00007FF68B293C3F]\n\t(No symbol) [0x00007FF68B28F6E4]\n\t(No symbol) [0x00007FF68B28F87D]\n\t(No symbol) [0x00007FF68B27ED49]\n\tBaseThreadInitThunk [0x00007FFCB359259D+29]\n\tRtlUserThreadStart [0x00007FFCB460AF38+40]", "trace": "browser_driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"815b79c7188d57c2c0984c0304dfaecf\")>\n\n    def test_steps(browser_driver):\n        driver = browser_driver\n        login_page = Login_page(driver)\n    \n        # Navigate to login page\n        login_page.navigate_to(login_page.login_url)\n    \n        # Perform login with incorrect credentials\n        login_page.login_as(\"standard_user\", \"\")\n    \n        # Assert if the error alert is displayed\n        login_page.get_wait(login_page.login_error_alert, 5).is_displayed()\n    \n>       assert login_page.get_text(login_page.login_error_msg)=='Epic sadface: Password is required', \"Error message missing!\"\n\ntests\\test_cases\\login\\test_login_no_password.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npage\\POM.py:27: in get_text\n    return self.get(identifier).text\npage\\POM.py:21: in get\n    return self.driver.find_element(*identfier)\nC:\\Users\\tan\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\test-package-xh99BTJe-py3.12\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:770: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nC:\\Users\\tan\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\test-package-xh99BTJe-py3.12\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000161094243E0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid selector\",\"message\":\"invalid selector\\\\nfrom javascript error: {\\...07FF68B27ED49]\\\\n\\\\tBaseThreadInitThunk [0x00007FFCB359259D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFCB460AF38+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSelectorException: Message: invalid selector\nE       from javascript error: {\"status\":32,\"value\":\"The result of the xpath expression \\\"//*[@id=\\\"login_button_container\\\"]/div/form/div[3]/h3/text()\\\" is: [object Text]. It should be an element.\"}\nE         (Session info: chrome=131.0.6778.205); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF68B31FB05+28789]\nE       \t(No symbol) [0x00007FF68B2886E0]\nE       \t(No symbol) [0x00007FF68B12592A]\nE       \t(No symbol) [0x00007FF68B12C48F]\nE       \t(No symbol) [0x00007FF68B12F13C]\nE       \t(No symbol) [0x00007FF68B12F20F]\nE       \t(No symbol) [0x00007FF68B178DBA]\nE       \t(No symbol) [0x00007FF68B1795FC]\nE       \t(No symbol) [0x00007FF68B1C28A7]\nE       \t(No symbol) [0x00007FF68B19F47F]\nE       \t(No symbol) [0x00007FF68B1BF654]\nE       \t(No symbol) [0x00007FF68B19F1E3]\nE       \t(No symbol) [0x00007FF68B16A938]\nE       \t(No symbol) [0x00007FF68B16BAA1]\nE       \tGetHandleVerifier [0x00007FF68B65933D+3410093]\nE       \tGetHandleVerifier [0x00007FF68B66E7DD+3497293]\nE       \tGetHandleVerifier [0x00007FF68B662A73+3448803]\nE       \tGetHandleVerifier [0x00007FF68B3E7BBB+848171]\nE       \t(No symbol) [0x00007FF68B293C3F]\nE       \t(No symbol) [0x00007FF68B28F6E4]\nE       \t(No symbol) [0x00007FF68B28F87D]\nE       \t(No symbol) [0x00007FF68B27ED49]\nE       \tBaseThreadInitThunk [0x00007FFCB359259D+29]\nE       \tRtlUserThreadStart [0x00007FFCB460AF38+40]\n\nC:\\Users\\tan\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\test-package-xh99BTJe-py3.12\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSelectorException"}, "start": 1735206120212, "stop": 1735206121442, "uuid": "21d72e0e-b5ae-4a5c-bac4-e1ce08bafdaa", "historyId": "83ee840ef3663a492a0946d7554fd6cd", "testCaseId": "83ee840ef3663a492a0946d7554fd6cd", "fullName": "tests.test_cases.login.test_login_no_password#test_steps", "labels": [{"name": "parentSuite", "value": "tests.test_cases.login"}, {"name": "suite", "value": "test_login_no_password"}, {"name": "host", "value": "LOQ15"}, {"name": "thread", "value": "23696-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_cases.login.test_login_no_password"}]}